#include "common.h"
#include "c-icap.h"
#include "service.h"
#include "header.h"
#include "body.h"
#include "simple_api.h"
#include "debug.h"
#include <time.h>
#include <mysql.h>

int echo_init_service(ci_service_xdata_t * srv_xdata, struct ci_server_conf *server_conf);
int echo_check_preview_handler(char *preview_data, int preview_data_len,ci_request_t *);
int echo_end_of_data_handler(ci_request_t * req);
void *echo_init_request_data(ci_request_t * req);
void echo_close_service();
void echo_release_request_data(void *data);
int echo_io(char *wbuf, int *wlen, char *rbuf, int *rlen, int iseof,ci_request_t * req);
char *mergstr(char *str1,char *str2);

/*Merge 2 string...*/
char *mergstr(char *str1,char *str2)
{
    char *result = malloc(strlen(str1)+strlen(str2)+1);//+1 for the zero-terminator
	//in real code you would check for errors in malloc here
    strcpy(result, str1);
    strcat(result, str2);
    return result;
}
CI_DECLARE_MOD_DATA ci_service_module_t service = {
     "echo",                         /* mod_name, The module name */
     "Echo demo service",            /* mod_short_descr,  Module short description */
     ICAP_RESPMOD | ICAP_REQMOD,     /* mod_type, The service type is responce or request modification */
     echo_init_service,              /* mod_init_service. Service initialization */
     NULL,                           /* post_init_service. Service initialization after c-icap configured. Not used here */
     echo_close_service,             /* mod_close_service. Called when service shutdowns. */
     echo_init_request_data,         /* mod_init_request_data */
     echo_release_request_data,      /* mod_release_request_data */
     echo_check_preview_handler,     /* mod_check_preview_handler */
     echo_end_of_data_handler,       /* mod_end_of_data_handler */
     echo_io,                        /* mod_service_io */
     NULL,
     NULL
};

/*
  The echo_req_data structure will store the data required to serve an ICAP request.
*/
struct echo_req_data {
    /*the body data*/
    ci_simple_file_t *body;
    /*flag for marking the eof*/
    int eof;
};


/* This function will be called when the service loaded  */
int echo_init_service(ci_service_xdata_t * srv_xdata, struct ci_server_conf *server_conf)
{
     ci_debug_printf(5, "Initialization of echo module......\n");
     /*Tell to the icap clients that we can support up to 1024 size of preview data*/
     ci_service_set_preview(srv_xdata, 1024);
     /*Tell to the icap clients that we support 204 responses*/
     ci_service_enable_204(srv_xdata);
     /*Tell to the icap clients to send preview data for all files*/
     ci_service_set_transfer_preview(srv_xdata, "*");
     /*Tell to the icap clients that we want the X-Authenticated-User and X-Authenticated-Groups headers
       which contains the username and the groups in which belongs.  */
     ci_service_set_xopts(srv_xdata,  CI_XAUTHENTICATEDUSER|CI_XAUTHENTICATEDGROUPS);
     return CI_OK;
}

/* This function will be called when the service shutdown */
void echo_close_service() 
{
    ci_debug_printf(5,"Service shutdown!\n");
    /*Nothing to do*/
}

/*This function will be executed when a new request for echo service arrives. This function will
  initialize the required structures and data to serve the request.
 */
void *echo_init_request_data(ci_request_t * req)
{
    struct echo_req_data *echo_data;
    /*Allocate memory fot the echo_data*/
    echo_data = malloc(sizeof(struct echo_req_data));
    if (!echo_data) {
        ci_debug_printf(1, "Memory allocation failed inside echo_init_request_data!\n");
        return NULL;
    }
    echo_data->body = NULL;
     echo_data->eof = 0;
     /*Return to the c-icap server the allocated data*/
     return echo_data;
}

/*This function will be executed after the request served to release allocated data*/
void echo_release_request_data(void *data)
{
    /*The data points to the echo_req_data struct we allocated in function echo_init_service */
    struct echo_req_data *echo_data = (struct echo_req_data *)data;
    /*if we had body data, release the related allocated data*/
    if(echo_data->body) {
        // The ci_simple_file_release will not remove the file
        ci_simple_file_release(echo_data->body);
        // The ci_simple_file_destroy will remove the file.
        //ci_simple_file_destroy(echo_data->body);
    }
    free(echo_data);
}


int echo_check_preview_handler(char *preview_data, int preview_data_len, ci_request_t * req)
{
	ci_off_t content_len;

	/*MySQL*/
	MYSQL *conn; /* MySQL connection */
	MYSQL_RES *result; /* result set */
	MYSQL_ROW row; /* an instance of a row from the result */
	int x;
	char *server = "localhost";
	char *user = "root";
	char *password = "123456";
	char *database = "icap";
	char *CookieValue, *Hostvalue, *UserAgentvalue;
	char *Content_Encoding=NULL;
	char *Transfer_Encoding=NULL;
	char *Path;
	/*Make Mysql query*/
	char query[4096]; //1024+1024
	char qprefix[1024];
	char qpostfix[1024];


     /*Get the echo_req_data we allocated using the  echo_init_service  function*/
     struct echo_req_data *echo_data = ci_service_data(req);
     /*If there are is a Content-Length header in encupsulated Http object read it
      and display a debug message (used here only for debuging purposes)*/
     content_len = ci_http_content_length(req);
     ci_debug_printf(9, "We expect to read :%" PRINTF_OFF_T " body data\n",(CAST_OFF_T) content_len);
     /*If there are not body data in HTTP encapsulated object but only headers
       respond with Allow204 (no modification required) and terminate here the
       ICAP transaction */
     if(!ci_req_hasbody(req))
	 return CI_MOD_ALLOW204;
     /*Unlock the request body data so the c-icap server can send data before all body data has received */
     ci_req_unlock_data(req);
     const char *username, *clientIP; 
     // get client ipaddress and username
     ci_headers_list_t *icapHeads = req->request_header;
    if ((username =  ci_headers_value(icapHeads, (char *)"X-Client-Username"))) {/*printf("\n Username -> %s\n",username);*/}
    if ((clientIP =  ci_headers_value(icapHeads, (char *)"X-Client-IP"))) { /*printf("\n IP is a -> %s\n",clientIP);*/}
    const char *content_type = ci_http_response_get_header(req, "Content-Type");
    printf ("[+] Content Type -> %s\n", content_type);
	char *CE=NULL;
	if((CE=ci_http_request(req)))
	if ((CE=ci_http_response_get_header(req,"Content-Encoding")))
	{
		printf("[+] Content-Encoding -> %s\n",CE);
		Content_Encoding=CE;
	}				
	char *TE=NULL;
	if ((TE=ci_http_response_get_header(req,"Transfer-Encoding")))
		{
			printf("[+] Transfer-Encoding-> %s",TE);
			Transfer_Encoding=TE;
		}


    if (1==1)//( content_type &&(strstr(content_type, "text/html")  || strstr(content_type, "image") ||	strstr(content_type,"application") || strstr(content_type,"video")))
	{
				printf("[+] Process the request...\n");
				if (ci_req_hasbody(req)) {         
					  char sdir[2048];
					  char DirName[1024];
					  snprintf(DirName,1024,"/var/tmp/%s",clientIP);
					  if(!(mkdir(DirName,S_IRWXU)))
						printf("[!] Error create Client-IP direcotry.\n");
				//echo_data->body = ci_simple_file_named_new(sdir, NULL, 0);
				snprintf(sdir,1024, "/var/tmp/%s", clientIP);
				Path=sdir;
				/*GET THE URL */
				char URL[1204];
				if (ci_http_request_url(req,URL, 1024)); //char * buf,int  buf_size))
				//printf ("\nURL -> %s\n",URL);
				/*Get URL and Splilit it, finallt ghater name */
				char *pch;
				char *SelectedName;
				pch = strtok (URL,"/");
				while (pch != NULL)
					{
						 SelectedName=pch;
						 pch = strtok (NULL, "/");
					}
				
				if ((strlen(SelectedName)>=254)){
					printf("[+] Selectedname {File name} big than 256 char, use partial name.\n");
					char SNTemp[1024];
					memset(SNTemp,'\0',sizeof(SelectedName));
					strncpy(SNTemp, SelectedName, 254);
					SelectedName=SNTemp;
					printf("[+] New SelectedName -> %s\n",SelectedName);
					}	

				if ((!(echo_data->body = ci_simple_file_named_new(sdir, SelectedName, 0)))) //|| strstr(content_type,"video")))
					{
						printf("[+] Filename/Folder exsit. Use @random and saving content.\n");
						char Time[100];
						char FolderName[1024];
						time_t now = time(NULL);
						struct tm *t = localtime(&now);
						strftime(Time, sizeof(Time)-1, "%d%m%Y%H%M", t);
						snprintf(FolderName,1024,"/var/tmp/%s/T%s", clientIP,Time);
						printf("--->[%s]\n", FolderName);
						Path=FolderName;
						if(!(mkdir(FolderName,S_IRWXU)))
						{
							printf("[!] Warnnig: Error creating folder or directory is exsit.\n");
						}
						//snprintf(FolderName,500,"%s-%s",SelectedName,FolderName);
						snprintf(sdir,2048, "%s/%s@",FolderName,SelectedName);
						echo_data->body = ci_simple_file_named_new(sdir,NULL , 0);
						FILE *f=fopen("/var/tmp/log.txt","a");
		                                time_t rawtime;  struct tm * timeinfo;time ( &rawtime );  timeinfo = localtime ( &rawtime );
                                        fprintf(f,"/=========[Duplicated]=========/\n");
                		                fprintf(f,"Time:\t%s",asctime(timeinfo));
                                                fprintf(f,"Request >>>>>>>>>>>>>>\n");
		                                char URLADD[1024];
                		                if (ci_http_request_url(req,URLADD,1024))
                                		        fprintf(f,"URL:\t%s\n",URLADD);
						// GET and save Request headers
                                                char *value=NULL;
                                                if ((value=ci_http_request_get_header(req,"Cookie")))
                                                {
                                                        fprintf(f,"Cookie:\t%s\n",value);
                                                        CookieValue=value;
                                                }
                                                if ((value=ci_http_request_get_header(req,"Host")))
                                                {
                                                        fprintf(f,"Host:\t%s\n",value);
                                                        Hostvalue=value;
                                                }
                                                if ((value=ci_http_request_get_header(req,"User-Agent")))
                                                {
                                                        fprintf(f,"User-Agent:\t%s\n",value);
                                                        UserAgentvalue=value;
                                                }
                                                fprintf(f,"<<<<<<<<<<<< Response\n");
		                                fprintf(f,"Content_Type:\t%s\n",content_type);
                		                fprintf(f,"Path:\t%s\n",sdir);
                                		fprintf(f,"Exsit File Name:\t%s\n",SelectedName);
		                                char *REQ;
                		                REQ=ci_http_request(req);
                                		fprintf(f, "Request:\t%s\n",REQ);
                		                fclose(f);

                		            	/* attempt to connect the server */
                		            	conn = mysql_init(NULL);
                		            	if (!mysql_real_connect(conn, server, user, password, database, 0, NULL, 0)) {
                		            	perror(mysql_error(conn));
                		            	return 0 ;
                		            	}
                		            	/*Creat query*/
                		            	snprintf(qprefix,1024, "insert into lucifer(time,url,cookie,sourceip,host,useragent,contenttype,path,filename,contentencoding,transferencoding) VALUES ");
                		            	snprintf(qpostfix,1024,"('%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s');",asctime(timeinfo),URLADD,CookieValue,clientIP,Hostvalue,UserAgentvalue,content_type,Path,SelectedName,Content_Encoding,Transfer_Encoding);
                		            	snprintf(query,4096,"%s%s",qprefix,qpostfix);
                		            	/* run the SQL query */
                		            	if (mysql_query(conn, query)) {	perror(mysql_error(conn));return 0;	}
                		            	result = mysql_use_result(conn);
                		            	mysql_free_result(result);
                		            	mysql_close(conn);
	 				}
				/* Write in file*/
					else{
						FILE *f=fopen("/var/tmp/log.txt","a");
						time_t rawtime;  struct tm * timeinfo;time ( &rawtime );  timeinfo = localtime ( &rawtime );
						fprintf(f,"Time:\t%s",asctime(timeinfo));
                        fprintf(f,"Request >>>>>>>>>>>>>>\n");
						char URLADD[1024];
						if (ci_http_request_url(req,URLADD,1024))
						fprintf(f,"URL:\t%s\n",URLADD);
						/* GET and save Request headers*/
						char *value=NULL;
						if ((value=ci_http_request_get_header(req,"Cookie")))					
							fprintf(f,"Cookie:\t%s\n",value);	
		                                if ((value=ci_http_request_get_header(req,"Host")))
		        	                	fprintf(f,"Host:\t%s\n",value);
        		                        if ((value=ci_http_request_get_header(req,"User-Agent")))
		               		        	fprintf(f,"User-Agent:\t%s\n",value);
                                                fprintf(f,"<<<<<<<<<<<< Response\n");
						fprintf(f,"Content_Type:\t%s\n",content_type);
						fprintf(f,"Path:\t%s\n",sdir);
						fprintf(f,"File Name:\t%s\n",SelectedName);
						char *REQ;
						REQ=ci_http_request(req);
						fprintf(f, "Request:\t%s\n",REQ);
						fprintf(f,"-----------------------------------------------------\n");
						fclose(f);
						/* attempt to connect the server */
						conn = mysql_init(NULL);
						if (!mysql_real_connect(conn, server, user, password, database, 0, NULL, 0)) {
						perror(mysql_error(conn));
						return 0 ;
						}
						/*Creat query*/
						snprintf(qprefix,1024, "insert into lucifer(time,url,cookie,sourceip,host,useragent,contenttype,path,filename,contentencoding,transferencoding) VALUES ");
						snprintf(qpostfix,1024,"('%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s');",asctime(timeinfo),URLADD,CookieValue,clientIP,Hostvalue,UserAgentvalue,content_type,Path,SelectedName,Content_Encoding,Transfer_Encoding);
						snprintf(query,4096,"%s%s",qprefix,qpostfix);
						/* run the SQL query */
						if (mysql_query(conn, query)) {	perror(mysql_error(conn));return 0;	}
						result = mysql_use_result(conn);
						mysql_free_result(result);
						mysql_close(conn);


				}

			}
			if (preview_data_len)
			{
				echo_data->eof = ci_req_hasalldata(req);
				ci_simple_file_write(echo_data->body, preview_data, preview_data_len, echo_data->eof);
			}
				return CI_MOD_CONTINUE;
    }
	else{
			/*Nothing to do just return an allow204 (No modification) to terminate here the ICAP transaction */
			ci_debug_printf(8, "Allow 204...\n");
			return CI_MOD_ALLOW204;
    }
}

/* This function will called if we returned CI_MOD_CONTINUE in  echo_check_preview_handler
 function, after we read all the data from the ICAP client*/
int echo_end_of_data_handler(ci_request_t * req)
{
    struct echo_req_data *echo_data = ci_service_data(req);
    /*mark the eof*/
    echo_data->eof = 1;
    /*and return CI_MOD_DONE */
     return CI_MOD_DONE;
}

/* This function will called if we returned CI_MOD_CONTINUE in  echo_check_preview_handler
   function, when new data arrived from the ICAP client and when the ICAP client is 
   ready to get data.
*/
int echo_io(char *wbuf, int *wlen, char *rbuf, int *rlen, int iseof,ci_request_t * req)
{
	int ret;
	struct echo_req_data *echo_data = ci_service_data(req);
	ret = CI_OK;

	/*write the data read from icap_client to the echo_data->body*/
	if(rlen && rbuf) {
		*rlen = ci_simple_file_write(echo_data->body, rbuf, *rlen, iseof);
		if (*rlen < 0)
		ret = CI_ERROR;
	}

	/*read some data from the echo_data->body and put them to the write buffer to be send
	to the ICAP client*/
	if (wbuf && wlen) {
	  *wlen = ci_simple_file_read(echo_data->body, wbuf, *wlen);
	}
	if(*wlen==0 && echo_data->eof==1)
	*wlen = CI_EOF;

	return ret;
}

